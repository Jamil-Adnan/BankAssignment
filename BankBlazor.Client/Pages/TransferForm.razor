@page "/transfer-funds"
@using BankBlazor.Client.Models
@inject HttpClient Http

<h3>Transfer Funds</h3>

<EditForm Model="transferDto" OnValidSubmit="SubmitTransfer">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Sender Account Number:</label>
        <InputNumber @bind-Value="transferDto.SenderAccountId" class="form-control" />
        <ValidationMessage For="@(() => transferDto.SenderAccountId)" />
    </div>

    <div class="form-group mt-3">
        <label>Receiver Bank Name:</label>
        <InputText @bind-Value="transferDto.ReceiverBank" class="form-control" />
        <ValidationMessage For="@(() => transferDto.ReceiverBank)" />
    </div>

    <div class="form-group mt-3">
        <label>Receiver Account Number:</label>
        <InputNumber @bind-Value="transferDto.ReceiverAccountId" class="form-control" />
        <ValidationMessage For="@(() => transferDto.ReceiverAccountId)" />
    </div>

    <div class="form-group mt-3">
        <label>Amount:</label>
        <InputNumber @bind-Value="transferDto.Amount" step="0.01" class="form-control" />
        <ValidationMessage For="@(() => transferDto.Amount)" />
    </div>

    <button type="submit" class="btn btn-primary mt-3">Transfer</button>
</EditForm>

@if (successMessageVisible)
{
    <div class="alert alert-success mt-4">
        ✅ Transfer completed successfully.
    </div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-4">
        ❌ @errorMessage
    </div>
}

@code {
    private TransferRequestDto transferDto = new();
    private bool successMessageVisible = false;
    private string? errorMessage;

    private async Task SubmitTransfer()
    {
        successMessageVisible = false;
        errorMessage = null;

        try
        {
            var response = await Http.PostAsJsonAsync("api/transactions/transfer", transferDto);

            if (response.IsSuccessStatusCode)
            {
                successMessageVisible = true;
                transferDto = new(); // Reset form
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = $"Error: {error}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Unexpected error: {ex.Message}";
        }
    }
}
