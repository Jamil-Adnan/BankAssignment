@page "/account-transaction"
@using BankBlazor.Client.Models
@using Microsoft.AspNetCore.Components.Forms
@inject HttpClient Http

<h3>account transaction</h3>

<editform model="transaction" onvalidsubmit="submittransaction">
    <dataannotationsvalidator />
    <validationsummary />

    <div class="form-group">
        <label>account number:</label>
        <InputNumber @bind-Value="transaction.AccountId" class="form-control" />
        <validationmessage for="() => transaction.accountid" />
    </div>

    <div class="form-group mt-3">
        <label>transaction type:</label>
        <InputRadioGroup @bind-Value="transaction.Operation" class="form-check">

            <div class="form-check">
                <inputradio tvalue="string" class="form-check-input" value="deposit" />
                <label class="form-check-label">deposit</label>
            </div>
            <div class="form-check">
                <inputradio tvalue="string" class="form-check-input" value="withdraw" />
                <label class="form-check-label">withdraw</label>
            </div>
        </InputRadioGroup>
        <validationmessage for="() => transaction.operation" />
    </div>


    <div class="form-group mt-3">
        <label>amount:</label>
        <InputNumber @bind-value="transaction.Amount" step="0.01" class="form-control" />
        <validationmessage for="() => transaction.amount" />
    </div>

    <div class="form-group mt-3">
        <label>symbol (optional):</label>
        <InputText @bind-value="transaction.Symbol" class="form-control" />
    </div>

    <button class="btn btn-primary mt-3" type="submit">submit</button>
</editform>

@if (showresult)
{
    <div class="alert alert-success mt-4">
        ✅ transaction successful. new balance: <strong>@newbalance.ToString("c")</strong>
    </div>
}
@if (!string.IsNullOrEmpty(errormessage))
{
    <div class="alert alert-danger mt-4">@errormessage</div>
}
@if (recentTransactions.Any())
{
    <h5 class="mt-4">Recent Transactions</h5>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Date</th>
                <th>Operation</th>
                <th>Amount</th>
                <th>Balance</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var txn in recentTransactions)
            {
                <tr>
                    <td>@txn.Date.ToString("g")</td>
                    <td>@txn.Operation</td>
                    <td>@txn.Amount.ToString("C")</td>
                    <td>@txn.Balance.ToString("C")</td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private DepositWithdrawRequestDto transaction = new();
    private decimal newbalance;
    private bool showresult = false;
    private string? errormessage;

    private async Task submittransaction()
    {
        showresult = false;
        errormessage = null;

        try
        {
            var response = await Http.PostAsJsonAsync("api/transactions/process", transaction);

            if (response.IsSuccessStatusCode)
            {
                newbalance = await response.Content.ReadFromJsonAsync<decimal>();
                showresult = true;
                transaction = new(); // reset form
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errormessage = $"❌ error: {error}";
            }
        }
        catch (Exception ex)
        {
            errormessage = $"❌ unexpected error: {ex.Message}";
        }

        await LoadRecentTransactions(transaction.AccountId);

    }

    private List<TransactionDto> recentTransactions = new();

    private async Task LoadRecentTransactions(int accountId)
    {
        try
        {
            var response = await Http.GetFromJsonAsync<List<TransactionDto>>($"api/transactions/recent/{accountId}");
            if (response != null)
            {
                recentTransactions = response;
            }
        }
        catch
        {
            // Optional: handle errors
        }
    }

}