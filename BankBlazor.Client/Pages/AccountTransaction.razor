@* @page "/account-transaction"
@using BankBlazor.Client.Models
@using Microsoft.AspNetCore.Components.Forms
@inject HttpClient Http

<h3>Account Transaction</h3>

<EditForm Model="transaction" OnValidSubmit="SubmitTransaction">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Account Number:</label>
        <InputNumber @bind-Value="transaction.AccountId" class="form-control" />
        <ValidationMessage For="() => transaction.AccountId" />
    </div>

    <div class="form-group mt-3">
        <label>Transaction Type:</label>
        <InputRadioGroup @bind-Value="transaction.Operation" class="form-check">
            <div class="form-check">
                <InputRadio TValue="string" class="form-check-input" Value="deposit" />
                <label class="form-check-label">Deposit</label>
            </div>
            <div class="form-check">
                <InputRadio TValue="string" class="form-check-input" Value="withdraw" />
                <label class="form-check-label">Withdraw</label>
            </div>
        </InputRadioGroup>
        <ValidationMessage For="() => transaction.Operation" />
    </div>


    <div class="form-group mt-3">
        <label>Amount:</label>
        <InputNumber @bind-Value="transaction.Amount" step="0.01" class="form-control" />
        <ValidationMessage For="() => transaction.Amount" />
    </div>

    <div class="form-group mt-3">
        <label>Symbol (optional):</label>
        <InputText @bind-Value="transaction.Symbol" class="form-control" />
    </div>

    <button class="btn btn-primary mt-3" type="submit">Submit</button>
</EditForm>

@if (showResult)
{
    <div class="alert alert-success mt-4">
        ✅ Transaction successful. New balance: <strong>@newBalance.ToString("C")</strong>
    </div>
}
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-4">@errorMessage</div>
}

@code {
    private DepositWithdrawRequestDto transaction = new();
    private decimal newBalance;
    private bool showResult = false;
    private string? errorMessage;

    private async Task SubmitTransaction()
    {
        showResult = false;
        errorMessage = null;

        try
        {
            var response = await Http.PostAsJsonAsync("api/transactions/process", transaction);

            if (response.IsSuccessStatusCode)
            {
                newBalance = await response.Content.ReadFromJsonAsync<decimal>();
                showResult = true;
                transaction = new(); // reset form
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = $"❌ Error: {error}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"❌ Unexpected error: {ex.Message}";
        }
    }
}
 *@